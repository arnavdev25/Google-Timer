{"version":3,"sources":["components/TickerCell/TickerCell.module.scss","components/Ticker/Ticker.module.scss","App.module.scss","components/TickerSeparator/TickerSeparator.module.scss","components/TickerCell/TickerCell.js","components/TickerSeparator/TickerSeparator.js","components/Ticker/Ticker.js","hooks/useTicker.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","TickerCell","label","value","formattedValue","toString","className","style","tickerCell","tickerCellValue","tickerCellLabel","TickerSeparator","separator","Ticker","futureDate","useState","Date","now","setNow","useEffect","interval","setInterval","clearInterval","isTimeUp","isBefore","days","hours","minutes","seconds","intervalToDuration","start","end","useTicker","tickerContents","timeIsUp","tickerShell","add","App","tickerVisible","setTickerVisible","tickerEl","toggleText","pageContainer","toggleButton","onClick","prev","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iHACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,gBAAkB,oCAAoC,gBAAkB,sC,iBCAtID,EAAOC,QAAU,CAAC,YAAc,4BAA4B,SAAW,2B,gBCAvED,EAAOC,QAAU,CAAC,cAAgB,2BAA2B,aAAe,4B,iBCA5ED,EAAOC,QAAU,CAAC,UAAY,qC,+ICCjBC,EAAa,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAC1BC,EAAiBD,EAAQ,GAAR,WAAiBA,GAASA,EAAME,WAEvD,OACI,sBAAKC,UAAYC,IAAMC,WAAvB,UACI,sBAAMF,UAAYC,IAAME,gBAAxB,SAA4CL,IAC5C,sBAAME,UAAYC,IAAMG,gBAAxB,SAA4CR,Q,iBCN3CS,EAAkB,WAC3B,OAAO,qBAAKL,UAAYC,IAAMK,UAAvB,gB,iCCGEC,EAAS,SAAC,GAAoB,IACvC,ECJqB,SAACC,GACtB,MAAuBC,mBAAS,IAAIC,MAApC,mBAAOC,EAAP,KAAYC,EAAZ,KAEAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBH,EAAO,IAAIF,QACZ,KAEH,OAAO,WACLM,cAAcF,MAEjB,CAACN,IAEJ,IAAMS,EAAWC,YAASV,EAAYG,GAEtC,GAAIM,EACA,MAAO,CAAEE,KAAM,EAAGC,MAAO,EAAGC,QAAS,EAAGC,QAAS,EAAGL,YAGxD,MAAwCM,YAAmB,CACvDC,MAAOb,EACPc,IAAKjB,IAGT,MAAO,CAAEW,KALT,EAAMA,KAKSC,MALf,EAAYA,MAKUC,QALtB,EAAmBA,QAKYC,QAL/B,EAA4BA,QAKYL,YDpBYS,CADd,EAAjBlB,YACbW,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,QACxBK,EADN,EAAuCV,SAEnC,qBAAKjB,UAAYC,IAAM2B,SAAvB,2BAEA,qCACI,cAAC,EAAD,CAAY/B,MAAOsB,EAAMvB,MAAM,SAC/B,cAAC,EAAD,IACA,cAAC,EAAD,CAAYC,MAAOuB,EAAOxB,MAAM,UAChC,cAAC,EAAD,IACA,cAAC,EAAD,CAAYC,MAAOwB,EAASzB,MAAM,YAClC,cAAC,EAAD,IACA,cAAC,EAAD,CAAYC,MAAOyB,EAAS1B,MAAM,eAI1C,OACI,qBAAKI,UAAYC,IAAM4B,YAAvB,SACMF,K,iBEhBRnB,EAAasB,YAAI,IAAIpB,KAAQ,CACjCS,KAAM,EACNC,MAAO,GACPC,QAAS,KAuBIU,MApBf,WACE,MAA0CtB,oBAAS,GAAnD,mBAAOuB,EAAP,KAAsBC,EAAtB,KACMC,EAAWF,EAAgB,cAAC,EAAD,CAAQxB,WAAYA,IAAiB,KAChE2B,EAAaH,EAAgB,iBAAkB,iBAErD,OACE,sBAAKhC,UAAYC,IAAMmC,cAAvB,UACE,gDACA,wFACEF,EACF,wBACElC,UAAYC,IAAMoC,aAClBC,QAAS,kBAAML,GAAiB,SAAAM,GAAI,OAAKA,MAF3C,SAIIJ,QChBKK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.95b14425.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tickerCell\":\"TickerCell_tickerCell__sEktr\",\"tickerCellValue\":\"TickerCell_tickerCellValue__30knr\",\"tickerCellLabel\":\"TickerCell_tickerCellLabel__tuUdJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tickerShell\":\"Ticker_tickerShell__3aolf\",\"timeIsUp\":\"Ticker_timeIsUp__3DHAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageContainer\":\"App_pageContainer__3-sow\",\"toggleButton\":\"App_toggleButton__r3azM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"separator\":\"TickerSeparator_separator__1euRa\"};","import style from './TickerCell.module.scss';\n\nexport const TickerCell = ({ label, value }) => {\n    const formattedValue = value < 10 ? `0${value}`: value.toString();\n\n    return (\n        <div className={ style.tickerCell }>\n            <span className={ style.tickerCellValue }>{ formattedValue }</span>\n            <span className={ style.tickerCellLabel }>{ label }</span>\n        </div>\n    );\n}","import style from './TickerSeparator.module.scss';\n\nexport const TickerSeparator = () => {\n    return <div className={ style.separator }>:</div>;\n}","import { TickerCell } from 'components/TickerCell';\nimport { TickerSeparator } from 'components/TickerSeparator';\nimport { useTicker } from 'hooks';\n\nimport style from './Ticker.module.scss';\n\nexport const Ticker = ({ futureDate }) => {\n    const { days, hours, minutes, seconds, isTimeUp } = useTicker(futureDate);\n    const tickerContents = isTimeUp ? (\n        <div className={ style.timeIsUp }>Time is up!!!</div>\n    ) : (\n        <>\n            <TickerCell value={days} label=\"Days\" />\n            <TickerSeparator />\n            <TickerCell value={hours} label=\"Hours\" />\n            <TickerSeparator />\n            <TickerCell value={minutes} label=\"Minutes\" />\n            <TickerSeparator />\n            <TickerCell value={seconds} label=\"Seconds\" />\n        </>\n    );\n\n    return (\n        <div className={ style.tickerShell }>\n            { tickerContents }           \n        </div>              \n    );\n}","import { useEffect, useState } from \"react\";\nimport { intervalToDuration, isBefore } from 'date-fns';\n\nexport const useTicker = (futureDate) => {\n    const [now, setNow] =  useState(new Date());\n\n    useEffect(() => {        \n        const interval = setInterval(() => {\n            setNow(new Date());          \n        }, 1000);\n    \n        return () => {\n          clearInterval(interval);\n        };\n    }, [futureDate]);\n\n    const isTimeUp = isBefore(futureDate, now);\n\n    if (isTimeUp) {\n        return { days: 0, hours: 0, minutes: 0, seconds: 0, isTimeUp };\n    }\n\n    let { days, hours, minutes, seconds } = intervalToDuration({\n        start: now,\n        end: futureDate\n    });\n\n    return { days, hours, minutes, seconds, isTimeUp };\n};","import { useState } from 'react';\nimport { add } from 'date-fns';\n\nimport { Ticker } from 'components/Ticker';\n\nimport style from './App.module.scss';\n\n// Defaults to 6 days, 22 hours, 40 minutes and 0 seconds from now in your timezone.\nconst futureDate = add(new Date(), {\n  days: 6,\n  hours: 22,\n  minutes: 40\n});\n\nfunction App() {\n  const [tickerVisible, setTickerVisible] = useState(false);\n  const tickerEl = tickerVisible ? <Ticker futureDate={futureDate} /> : null;\n  const toggleText = tickerVisible ? 'Hide Countdown': 'Show Countdown';\n\n  return (\n    <div className={ style.pageContainer }>\n      <h1>Join Our Event</h1>\n      <p>Come check out our great event. It will be lots of fun.</p>\n      { tickerEl }\n      <button \n        className={ style.toggleButton } \n        onClick={() => setTickerVisible(prev => !prev) }\n      >\n        { toggleText }\n      </button>\n    </div>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}